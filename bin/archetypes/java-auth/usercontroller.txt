./src/main/java/com/<_name_>/user/UserController.java
package com.<_name_>.user;

import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.<_name_>.util.Auth;
import com.auth0.jwt.exceptions.JWTVerificationException;

import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@CrossOrigin
@Controller
public class UserController {

	@Autowired
	private UserService userService;

	@ResponseBody
	@RequestMapping(value = "/users", method = RequestMethod.GET)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = "OK"),
		@ApiResponse(code = 400, message = "Bad Request"),
		@ApiResponse(code = 404, message = "Resource Not Found"),
		@ApiResponse(code = 500, message = "Internal server error"),
		@ApiResponse(code = 503, message = "NameOfService service not available")})
	public ResponseEntity<Object> getAllUsers(HttpServletRequest request) throws IllegalArgumentException, UnsupportedEncodingException {
		try {
			if(Auth.getAuth().isAdmin(request)) {
				return new ResponseEntity<Object>(userService.getAllUsers(), HttpStatus.OK);
			}
			return new ResponseEntity<Object>("Unauthorized", HttpStatus.UNAUTHORIZED);
		} catch (JWTVerificationException e) {
			return new ResponseEntity<Object>(e.getMessage(), HttpStatus.UNAUTHORIZED);
		}
	}

	@ResponseBody
	@RequestMapping(value = "/users/login", method = RequestMethod.POST)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = "OK"),
		@ApiResponse(code = 400, message = "Bad Request"),
		@ApiResponse(code = 404, message = "Resource Not Found"),
		@ApiResponse(code = 500, message = "Internal server error"),
		@ApiResponse(code = 503, message = "NameOfService service not available")})
	public ResponseEntity<Object> getUser(@RequestBody UserEntity user, HttpServletRequest request) {
		UserEntity foundUser = userService.getUser(user);
		if(foundUser == null) {
			return new ResponseEntity<Object>("Incorrect username or password.", HttpStatus.UNAUTHORIZED);
		}
		return new ResponseEntity<Object>(foundUser, HttpStatus.OK);
	}

	@ResponseBody
	@RequestMapping(value = "/users/register", method = RequestMethod.POST)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = "OK"),
		@ApiResponse(code = 400, message = "Bad Request"),
		@ApiResponse(code = 404, message = "Resource Not Found"),
		@ApiResponse(code = 500, message = "Internal server error"),
		@ApiResponse(code = 503, message = "NameOfService service not available")})
	public ResponseEntity<Object> createUser(@RequestBody UserEntity user, HttpServletRequest request) throws IllegalArgumentException, UnsupportedEncodingException {
		UserEntity newUser = userService.createUser(user);
		if(newUser.getUserId() == 0) {
			return new ResponseEntity<Object>("Duplicate Entry", HttpStatus.BAD_REQUEST);
		}
		return new ResponseEntity<Object>(newUser, HttpStatus.CREATED);
	}

	@ResponseBody
	@RequestMapping(value = "/users/{userId}", method = RequestMethod.DELETE)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = "OK"),
		@ApiResponse(code = 400, message = "Bad Request"),
		@ApiResponse(code = 404, message = "Resource Not Found"),
		@ApiResponse(code = 500, message = "Internal server error"),
		@ApiResponse(code = 503, message = "NameOfService service not available")})
	public ResponseEntity<Object> deleteUser(@PathVariable int userId, HttpServletRequest request) throws IllegalArgumentException, UnsupportedEncodingException {
		try {
			if(Auth.getAuth().isAdmin(request)) {
				return new ResponseEntity<Object>(userService.deleteUser(userId), HttpStatus.OK);
			}
			return new ResponseEntity<Object>("Unauthorized", HttpStatus.UNAUTHORIZED);
		} catch (JWTVerificationException e) {
			return new ResponseEntity<Object>(e.getMessage(), HttpStatus.UNAUTHORIZED);
		}
	}

}
